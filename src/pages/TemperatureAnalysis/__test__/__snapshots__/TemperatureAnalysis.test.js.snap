// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Temperature Component Test Temperature component renders correctly 1`] = `
<WithStyles(ForwardRef(Container))
  className="makeStyles-container-3"
  maxWidth="lg"
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={3}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      lg={12}
      md={12}
      xs={12}
    >
      <WithStyles(ForwardRef(Paper))
        className="makeStyles-paper-1 makeStyles-autoHeight-2"
      >
        <TemperatureVisualisation />
      </WithStyles(ForwardRef(Paper))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</WithStyles(ForwardRef(Container))>
`;

exports[`TemperatureChart Component Test TemperatureChart component renders correctly 1`] = `
<ResponsiveContainer
  debounce={0}
  height={300}
  width="95%"
>
  <LineChart
    barCategoryGap="10%"
    barGap={4}
    data={Array []}
    layout="horizontal"
    margin={
      Object {
        "bottom": 5,
        "left": 5,
        "right": 5,
        "top": 5,
      }
    }
    reverseStackOrder={false}
    stackOffset="none"
  >
    <XAxis
      allowDataOverflow={false}
      allowDecimals={true}
      allowDuplicatedCategory={true}
      dataKey="date"
      domain={
        Array [
          0,
          "auto",
        ]
      }
      height={30}
      hide={false}
      mirror={false}
      orientation="bottom"
      padding={
        Object {
          "left": 0,
          "right": 0,
        }
      }
      reversed={false}
      scale="auto"
      tickCount={5}
      type="category"
      width={0}
      xAxisId={0}
    />
    <YAxis
      allowDataOverflow={false}
      allowDecimals={true}
      allowDuplicatedCategory={true}
      domain={
        Array [
          0,
          "auto",
        ]
      }
      height={0}
      hide={false}
      mirror={false}
      orientation="left"
      padding={
        Object {
          "bottom": 0,
          "top": 0,
        }
      }
      reversed={false}
      scale="auto"
      tickCount={5}
      type="number"
      unit="°C"
      width={60}
      yAxisId={0}
    />
    <Tooltip
      active={false}
      allowEscapeViewBox={
        Object {
          "x": false,
          "y": false,
        }
      }
      animationDuration={400}
      animationEasing="ease"
      contentStyle={Object {}}
      coordinate={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      cursor={true}
      cursorStyle={Object {}}
      filterNull={true}
      isAnimationActive={true}
      itemStyle={Object {}}
      labelStyle={Object {}}
      offset={10}
      separator=" : "
      useTranslate3d={false}
      viewBox={
        Object {
          "x1": 0,
          "x2": 0,
          "y1": 0,
          "y2": 0,
        }
      }
      wrapperStyle={Object {}}
    />
    <CartesianGrid
      fill="none"
      horizontal={true}
      horizontalFill={Array []}
      horizontalPoints={Array []}
      stroke="#eee"
      strokeDasharray="5 5"
      vertical={true}
      verticalFill={Array []}
      verticalPoints={Array []}
    />
    <Line
      activeDot={true}
      animateNewValues={true}
      animationBegin={0}
      animationDuration={1500}
      animationEasing="ease"
      connectNulls={false}
      dataKey="max"
      dot={false}
      fill="#fff"
      hide={false}
      isAnimationActive={true}
      legendType="line"
      onAnimationEnd={[Function]}
      onAnimationStart={[Function]}
      points={Array []}
      stroke="#8884d8"
      strokeWidth={1}
      type="monotone"
      xAxisId={0}
      yAxisId={0}
    />
    <Line
      activeDot={true}
      animateNewValues={true}
      animationBegin={0}
      animationDuration={1500}
      animationEasing="ease"
      connectNulls={false}
      dataKey="min"
      dot={false}
      fill="#fff"
      hide={false}
      isAnimationActive={true}
      legendType="line"
      onAnimationEnd={[Function]}
      onAnimationStart={[Function]}
      points={Array []}
      stroke="#82ca9d"
      strokeWidth={1}
      type="monotone"
      xAxisId={0}
      yAxisId={0}
    />
  </LineChart>
</ResponsiveContainer>
`;

exports[`Visualisation Component Test Visualisation component renders correctly 1`] = `
<WithStyles(ForwardRef(Grid))
  item={true}
  lg={12}
  md={12}
  xs={12}
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    item={true}
    justify="space-between"
    lg={12}
    md={12}
    style={
      Object {
        "paddingLeft": 10,
        "paddingRight": 10,
        "paddingTop": 10,
      }
    }
    xs={12}
  >
    <WithStyles(ForwardRef(Typography))>
      Temperature
    </WithStyles(ForwardRef(Typography))>
    <div
      style={
        Object {
          "justifyContent": "center",
        }
      }
    >
      <DateRangePicker
        calendarIcon={
          <svg
            className="react-daterange-picker__calendar-button__icon react-daterange-picker__button__icon"
            height={19}
            stroke="black"
            strokeWidth={2}
            viewBox="0 0 19 19"
            width={19}
            xmlns="http://www.w3.org/2000/svg"
          >
            <rect
              fill="none"
              height="15"
              width="15"
              x="2"
              y="2"
            />
            <line
              x1="6"
              x2="6"
              y1="0"
              y2="4"
            />
            <line
              x1="13"
              x2="13"
              y1="0"
              y2="4"
            />
          </svg>
        }
        clearIcon={
          <svg
            className="react-daterange-picker__clear-button__icon react-daterange-picker__button__icon"
            height={19}
            stroke="black"
            strokeWidth={2}
            viewBox="0 0 19 19"
            width={19}
            xmlns="http://www.w3.org/2000/svg"
          >
            <line
              x1="4"
              x2="15"
              y1="4"
              y2="15"
            />
            <line
              x1="15"
              x2="4"
              y1="4"
              y2="15"
            />
          </svg>
        }
        closeCalendar={true}
        isOpen={null}
        name="daterange"
        onChange={[Function]}
        rangeDivider="–"
        value={
          Array [
            "2019-09-25T04:44:39.225Z",
            "2020-09-25T04:44:39.225Z",
          ]
        }
      />
      <WithStyles(ForwardRef(IconButton))
        aria-label="refresh"
        onClick={[Function]}
      >
        <RefreshIcon
          fontSize="small"
        />
      </WithStyles(ForwardRef(IconButton))>
    </div>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Grid))
    item={true}
    lg={12}
    md={12}
    xs={12}
  >
    <WithStyles(ForwardRef(CircularProgress)) />
  </WithStyles(ForwardRef(Grid))>
</WithStyles(ForwardRef(Grid))>
`;
